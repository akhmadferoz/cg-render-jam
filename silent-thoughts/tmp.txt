<script id="vertex-shader" type="x-shader/x-vertex">
      #version 300 es

      in vec4 vPosition;  // attribute
      in vec4 vColor;
      in vec4 aNormal;
      uniform mat4 modelViewMatrix;
      uniform mat4 projectionMatrix;
      uniform mat3 uNormalMatrix;
      uniform vec4 uLightPosition;
      uniform vec4 uAmbientLight;
      uniform vec4 uDiffuseLight;
      uniform vec4 uSpecularLight;
      uniform float uShininess;

      out vec4 fColor;
      flat out vec4 fColor1;
      out vec3 N, L, E;

      float map_point(float P, float Q, float A, float B, float X) {
      	// Calculate lengths for PQ and PX segments
      	float PQ = abs(P-Q);
      	float PX = abs(P-X);

      	// Compute alpha as a ratio of those two
      	float alpha = PX / PQ;

      	// return output point as an affine combination of A and B using alpha
      	return mix(A, B, alpha);
      }

      void main(){
      	vec4 vPositionAdj = projectionMatrix * modelViewMatrix * vPosition;
      	vec3 pos = vPositionAdj.xyz;

      	if(uLightPosition.w == 0.0)
      	L = normalize(uLightPosition.xyz);
      	else L = normalize( uLightPosition.xyz - pos );

      	E = -normalize(pos);
      	N = normalize( uNormalMatrix * aNormal.xyz);

      	gl_Position = vPositionAdj;
      	gl_PointSize = 4.0;
      	fColor1 = vColor;

      	// Source: http://interactivecomputergraphics.com/Code/06/

      	vec3 H = normalize( L + E );
      	vec4 ambient = uAmbientLight * vColor;

      	float Kd = max(dot(L, N), 0.0);
      	vec4  diffuse = Kd * uDiffuseLight * vColor;

      	float Ks = pow( max(dot(N, H), 0.0), uShininess  + 80.0);
      	vec4  specular = Ks * uSpecularLight * vec4(1.0, 1.0, 1.0, 1.0);

      	if( dot(L, N) < 0.0 ) specular = vec4(0.0, 0.0, 0.0, 1.0);

      	fColor = 0.8*ambient + diffuse  + specular ;
      	fColor.a = 1.0;
      }
    </script>

    <script id="fragment-shader" type="x-shader/x-fragment">
      #version 300 es
      precision highp float;
      in vec4 fColor;
      flat in vec4 fColor1;
      out vec4 fragColor;
      in vec3 N, L, E;
      uniform vec4 uAmbientLight;
      uniform vec4 uDiffuseLight;
      uniform vec4 uSpecularLight;
      uniform float uShininess;

      void main()
      {
      	fragColor = fColor;
      }
    </script>